name: Sync Model Data (Optimized)

on:
  schedule:
    # Run every hour to prevent conflicts and reduce load
    - cron: '0 * * * *'
  workflow_dispatch: # Manual execution
  push:
    branches:
      - master
    paths:
      - 'scripts/sync-models.js'
      - 'scripts/export-to-json.js'
      - '.github/workflows/sync-data.yml'

jobs:
  sync-data:
    runs-on: ubuntu-latest
    timeout-minutes: 10 # Prevent hanging jobs
    
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --production=false
          npx prisma generate
        env:
          DATABASE_URL: "file:./prisma/dev.db"
          
      - name: Create data directory
        run: |
          mkdir -p data
          echo "üìÅ Data directory ready"
          
      - name: Setup database
        run: |
          # Ensure database file exists
          mkdir -p prisma
          touch prisma/dev.db
          npx prisma db push --skip-generate
        env:
          DATABASE_URL: "file:./prisma/dev.db"
          
      - name: Run sync script with error handling
        id: sync
        run: |
          node scripts/sync-models.js || {
            echo "sync_failed=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Sync failed, continuing with export"
          }
        env:
          DATABASE_URL: "file:./prisma/dev.db"
          NODE_ENV: production
        continue-on-error: true
          
      - name: Extract data to JSON
        id: export
        run: |
          # Create default files if they don't exist
          if [ ! -f data/models.json ]; then
            echo '{"models":[],"statistics":{"totalModels":0,"activeModels":0,"operationalModels":0,"avgAvailability":0}}' > data/models.json
          fi
          
          node scripts/export-to-json.js || {
            echo "export_failed=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Export failed, using existing data"
          }
        env:
          DATABASE_URL: "file:./prisma/dev.db"
        continue-on-error: true
          
      - name: Validate JSON files
        run: |
          # Ensure valid JSON structure
          for file in data/*.json; do
            if [ -f "$file" ]; then
              jq empty "$file" || {
                echo "‚ö†Ô∏è Invalid JSON in $file, creating backup"
                mv "$file" "$file.invalid"
                echo '{}' > "$file"
              }
            fi
          done
          
      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet data/; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changes detected in data files"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected in data files"
            git diff --stat data/
          fi
          
      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/
          
          # Safe JSON parsing with defaults
          TOTAL_MODELS=$(jq -r '.statistics.totalModels // 0' data/models.json 2>/dev/null || echo "0")
          ACTIVE_MODELS=$(jq -r '.statistics.activeModels // 0' data/models.json 2>/dev/null || echo "0")
          OPERATIONAL=$(jq -r '.statistics.operationalModels // 0' data/models.json 2>/dev/null || echo "0")
          AVG_AVAILABILITY=$(jq -r '.statistics.avgAvailability // 0' data/models.json 2>/dev/null || echo "0")
          
          git commit -m "feat: update AI models data [skip ci]" -m "üìä Models: ${TOTAL_MODELS} | Active: ${ACTIVE_MODELS} | Operational: ${OPERATIONAL} | Availability: ${AVG_AVAILABILITY}%
          
          ü§ñ Automated sync at $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          üîÑ Next sync in 30 minutes"
          
          git push || {
            echo "‚ö†Ô∏è Push failed, will retry next run"
            exit 0
          }
          
      - name: Report sync status
        if: always()
        run: |
          echo "## Sync Report"
          echo "- Sync: ${{ steps.sync.outputs.sync_failed != 'true' && '‚úÖ Success' || '‚ö†Ô∏è Failed' }}"
          echo "- Export: ${{ steps.export.outputs.export_failed != 'true' && '‚úÖ Success' || '‚ö†Ô∏è Failed' }}"
          echo "- Changes: ${{ steps.check_changes.outputs.changes == 'true' && '‚úÖ Detected' || '‚ÑπÔ∏è None' }}"