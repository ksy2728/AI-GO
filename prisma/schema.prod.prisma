// Production Schema for MySQL/PlanetScale
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==================== CORE MODELS ====================

model Provider {
  id               String   @id @default(cuid())
  slug             String   @unique 
  name             String   
  logoUrl          String?  @map("logo_url") @db.Text
  websiteUrl       String?  @map("website_url") @db.Text
  statusPageUrl    String?  @map("status_page_url") @db.Text
  documentationUrl String?  @map("documentation_url") @db.Text
  regions          String   @default("[]") @db.Text  // JSON string
  metadata         String   @default("{}") @db.Text  // JSON string
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  models    Model[]
  incidents Incident[]

  @@index([slug])
  @@map("providers")
}

model Model {
  id                String     @id @default(cuid())
  providerId        String     @map("provider_id")
  slug              String     @unique 
  name              String     @db.VarChar(255)
  description       String?    @db.Text
  foundationModel   String?    @map("foundation_model") @db.VarChar(255)
  releasedAt        DateTime?  @map("released_at") 
  deprecatedAt      DateTime?  @map("deprecated_at") 
  sunsetAt          DateTime?  @map("sunset_at") 
  modalities        String     @default("[]") @db.Text  // JSON string
  capabilities      String     @default("[]") @db.Text  // JSON string
  contextWindow     Int?       @map("context_window")
  maxOutputTokens   Int?       @map("max_output_tokens")
  trainingCutoff    DateTime?  @map("training_cutoff") 
  apiVersion        String?    @map("api_version") @db.VarChar(50)
  isActive          Boolean    @default(true) @map("is_active")
  metadata          String     @default("{}") @db.Text  // JSON string
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")

  provider         Provider           @relation(fields: [providerId], references: [id], onDelete: Cascade)
  endpoints        ModelEndpoint[]
  pricing          Pricing[]
  benchmarkScores  BenchmarkScore[]
  incidents        Incident[]
  status           ModelStatus[]

  @@index([providerId])
  @@index([slug])
  @@index([foundationModel])
  @@index([isActive])
  @@map("models")
}

model ModelEndpoint {
  id          String   @id @default(cuid())
  modelId     String   @map("model_id")
  region      String   @db.VarChar(50)
  endpointUrl String   @map("endpoint_url") @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  priority    Int      @default(100)
  createdAt   DateTime @default(now()) @map("created_at")

  model Model @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@unique([modelId, region])
  @@index([modelId])
  @@index([region])
  @@map("model_endpoints")
}

// ==================== PRICING ====================

model Pricing {
  id                   String    @id @default(cuid())
  modelId              String    @map("model_id")
  tier                 String    @db.VarChar(50)
  region               String?   @db.VarChar(50)
  currency             String    @default("USD") @db.VarChar(10)
  inputPerMillion      Decimal?  @map("input_per_million") @db.Decimal(10, 6)
  outputPerMillion     Decimal?  @map("output_per_million") @db.Decimal(10, 6)
  imagePerUnit         Decimal?  @map("image_per_unit") @db.Decimal(10, 6)
  audioPerMinute       Decimal?  @map("audio_per_minute") @db.Decimal(10, 6)
  videoPerMinute       Decimal?  @map("video_per_minute") @db.Decimal(10, 6)
  fineTuningPerMillion Decimal?  @map("fine_tuning_per_million") @db.Decimal(10, 6)
  volumeDiscounts      String    @default("[]") @map("volume_discounts") @db.Text  // JSON string
  effectiveFrom        DateTime  @map("effective_from") 
  effectiveTo          DateTime? @map("effective_to") 
  metadata             String    @default("{}") @db.Text  // JSON string
  createdAt            DateTime  @default(now()) @map("created_at")

  model Model @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@index([modelId])
  @@index([region])
  @@index([effectiveFrom])
  @@index([effectiveTo])
  @@map("pricing")
}

// ==================== BENCHMARKS ====================

model BenchmarkSuite {
  id               String   @id @default(cuid())
  slug             String   @unique @db.VarChar(100)
  name             String   @db.VarChar(255)
  description      String?  @db.Text
  category         String?  @db.VarChar(100)
  version          String?  @db.VarChar(50)
  evaluationType   String?  @map("evaluation_type") @db.VarChar(50)
  maxScore         Decimal? @map("max_score") @db.Decimal(10, 4)
  scoringMethod    String?  @map("scoring_method") @db.VarChar(100)
  metadata         String   @default("{}") @db.Text  // JSON string
  createdAt        DateTime @default(now()) @map("created_at")

  benchmarkScores BenchmarkScore[]

  @@index([slug])
  @@index([category])
  @@map("benchmark_suites")
}

model BenchmarkScore {
  id                String   @id @default(cuid())
  modelId           String   @map("model_id")
  suiteId           String   @map("suite_id")
  scoreRaw          Decimal  @map("score_raw") @db.Decimal(10, 4)
  scoreNormalized   Decimal? @map("score_normalized") @db.Decimal(5, 4)
  percentile        Int?
  evaluationDate    DateTime @map("evaluation_date") 
  evaluationCommit  String?  @map("evaluation_commit") @db.VarChar(255)
  configuration     String   @default("{}") @db.Text  // JSON string
  notes             String?  @db.Text
  isOfficial        Boolean  @default(false) @map("is_official")
  createdAt         DateTime @default(now()) @map("created_at")

  model Model          @relation(fields: [modelId], references: [id], onDelete: Cascade)
  suite BenchmarkSuite @relation(fields: [suiteId], references: [id], onDelete: Cascade)

  @@unique([modelId, suiteId, evaluationDate])
  @@index([modelId])
  @@index([suiteId])
  @@index([evaluationDate])
  @@map("benchmark_scores")
}

// ==================== INCIDENTS ====================

model Incident {
  id                 String    @id @default(cuid())
  modelId            String?   @map("model_id")
  providerId         String?   @map("provider_id")
  regions            String    @default("[]") @db.Text  // JSON string
  severity           String    @db.VarChar(20) // 'minor', 'major', 'critical'
  status             String    @db.VarChar(20) // 'investigating', 'identified', 'monitoring', 'resolved'
  title              String    @db.VarChar(500)
  description        String?   @db.Text
  impactDescription  String?   @map("impact_description") @db.Text
  startedAt          DateTime  @map("started_at")
  identifiedAt       DateTime? @map("identified_at")
  resolvedAt         DateTime? @map("resolved_at")
  postmortemUrl      String?   @map("postmortem_url") @db.Text
  metadata           String    @default("{}") @db.Text  // JSON string
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  model    Model?    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  provider Provider? @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([modelId])
  @@index([providerId])
  @@index([startedAt])
  @@index([status])
  @@index([severity])
  @@map("incidents")
}

// ==================== AI MODEL STATUS ====================

model ModelStatus {
  id               String   @id @default(cuid())
  modelId          String   @map("model_id")
  status           String   @default("operational") @db.VarChar(20)  // operational, degraded, outage
  availability     Decimal  @default(99.9) @db.Decimal(5, 2)
  latencyP50       Int      @default(100) @map("latency_p50")
  latencyP95       Int      @default(200) @map("latency_p95")
  latencyP99       Int      @default(500) @map("latency_p99")
  errorRate        Decimal  @default(0.1) @map("error_rate") @db.Decimal(5, 4)
  requestsPerMin   Int      @default(0) @map("requests_per_min")
  tokensPerMin     Int      @default(0) @map("tokens_per_min")
  usage            Decimal  @default(0) @db.Decimal(5, 2) // Usage percentage (0-100)
  region           String?  @db.VarChar(50)
  checkedAt        DateTime @default(now()) @map("checked_at")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  model Model @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@unique([modelId, region])
  @@index([modelId])
  @@index([status])
  @@index([checkedAt])
  @@map("model_status")
}