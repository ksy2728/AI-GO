generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Provider {
  id               String      @id @default(uuid())
  slug             String      @unique
  name             String
  logoUrl          String?     @map("logo_url")
  websiteUrl       String?     @map("website_url")
  statusPageUrl    String?     @map("status_page_url")
  documentationUrl String?     @map("documentation_url")
  regions          String      @default("[]")
  metadata         String      @default("{}")
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  changeLogs       ChangeLog[]
  incidents        Incident[]
  models           Model[]

  @@index([slug])
  @@map("providers")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Model {
  id                String                   @id @default(uuid())
  providerId        String                   @map("provider_id")
  slug              String                   @unique
  name              String
  description       String?
  foundationModel   String?                  @map("foundation_model")
  releasedAt        DateTime?                @map("released_at")
  deprecatedAt      DateTime?                @map("deprecated_at")
  sunsetAt          DateTime?                @map("sunset_at")
  modalities        String                   @default("[]")
  capabilities      String                   @default("[]")
  contextWindow     Int?                     @map("context_window")
  maxOutputTokens   Int?                     @map("max_output_tokens")
  trainingCutoff    DateTime?                @map("training_cutoff")
  apiVersion        String?                  @map("api_version")
  isActive          Boolean                  @default(true) @map("is_active")
  metadata          String                   @default("{}")
  createdAt         DateTime                 @default(now()) @map("created_at")
  updatedAt         DateTime                 @updatedAt @map("updated_at")
  searchVector      Unsupported("tsvector")? @map("search_vector")
  tags              String[]                 @default([])
  intelligenceScore Int?                     @map("intelligence_score")
  outputSpeed       Int?                     @map("output_speed")
  inputPrice        Decimal?                 @map("input_price") @db.Decimal(10, 4)
  outputPrice       Decimal?                 @map("output_price") @db.Decimal(10, 4)
  dataSource        String?                  @map("data_source")
  lastVerified      DateTime?                @map("last_verified")
  isFeatured        Boolean                  @default(false) @map("is_featured")
  featuredOrder     Int?                     @map("featured_order")
  featuredAt        DateTime?                @map("featured_at")
  featuredBy        String?                  @map("featured_by")
  featuredReason    String?                  @map("featured_reason")
  benchmarkScores   BenchmarkScore[]
  incidents         Incident[]
  endpoints         ModelEndpoint[]
  status            ModelStatus[]
  provider          Provider                 @relation(fields: [providerId], references: [id], onDelete: Cascade)
  pricing           Pricing[]

  @@index([providerId])
  @@index([slug])
  @@index([foundationModel])
  @@index([isActive])
  @@index([dataSource])
  @@index([lastVerified])
  @@index([searchVector], map: "idx_models_search_vector", type: Gin)
  @@index([tags], map: "idx_models_tags", type: Gin)
  @@map("models")
}

model ModelEndpoint {
  id          String   @id @default(uuid())
  modelId     String   @map("model_id")
  region      String
  endpointUrl String   @map("endpoint_url")
  isActive    Boolean  @default(true) @map("is_active")
  priority    Int      @default(100)
  createdAt   DateTime @default(now()) @map("created_at")
  model       Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@unique([modelId, region])
  @@index([modelId, region])
  @@map("model_endpoints")
}

model Pricing {
  id                   String    @id @default(uuid())
  modelId              String    @map("model_id")
  tier                 String
  region               String?
  currency             String    @default("USD")
  inputPerMillion      Float?    @map("input_per_million")
  outputPerMillion     Float?    @map("output_per_million")
  imagePerUnit         Float?    @map("image_per_unit")
  audioPerMinute       Float?    @map("audio_per_minute")
  videoPerMinute       Float?    @map("video_per_minute")
  fineTuningPerMillion Float?    @map("fine_tuning_per_million")
  volumeDiscounts      String    @default("[]") @map("volume_discounts")
  effectiveFrom        DateTime  @map("effective_from")
  effectiveTo          DateTime? @map("effective_to")
  metadata             String    @default("{}")
  createdAt            DateTime  @default(now()) @map("created_at")
  model                Model     @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@index([modelId])
  @@index([region])
  @@index([effectiveFrom, effectiveTo])
  @@map("pricing")
}

model BenchmarkSuite {
  id              String           @id @default(uuid())
  slug            String           @unique
  name            String
  description     String?
  category        String?
  version         String?
  evaluationType  String?          @map("evaluation_type")
  maxScore        Float?           @map("max_score")
  scoringMethod   String?          @map("scoring_method")
  metadata        String           @default("{}")
  createdAt       DateTime         @default(now()) @map("created_at")
  benchmarkScores BenchmarkScore[]

  @@index([slug])
  @@index([category])
  @@map("benchmark_suites")
}

model BenchmarkScore {
  id               String         @id @default(uuid())
  modelId          String         @map("model_id")
  suiteId          String         @map("suite_id")
  scoreRaw         Float          @map("score_raw")
  scoreNormalized  Float?         @map("score_normalized")
  percentile       Int?
  evaluationDate   DateTime       @map("evaluation_date")
  evaluationCommit String?        @map("evaluation_commit")
  configuration    String         @default("{}")
  notes            String?
  isOfficial       Boolean        @default(false) @map("is_official")
  createdAt        DateTime       @default(now()) @map("created_at")
  model            Model          @relation(fields: [modelId], references: [id], onDelete: Cascade)
  suite            BenchmarkSuite @relation(fields: [suiteId], references: [id], onDelete: Cascade)

  @@unique([modelId, suiteId, evaluationDate])
  @@index([modelId])
  @@index([suiteId])
  @@index([evaluationDate])
  @@map("benchmark_scores")
}

model Incident {
  id                String    @id @default(uuid())
  modelId           String?   @map("model_id")
  providerId        String?   @map("provider_id")
  regions           String    @default("[]")
  severity          String
  status            String
  title             String
  description       String?
  impactDescription String?   @map("impact_description")
  startedAt         DateTime  @map("started_at")
  identifiedAt      DateTime? @map("identified_at")
  resolvedAt        DateTime? @map("resolved_at")
  postmortemUrl     String?   @map("postmortem_url")
  metadata          String    @default("{}")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  model             Model?    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  provider          Provider? @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([modelId])
  @@index([providerId])
  @@index([startedAt])
  @@index([status])
  @@map("incidents")
}

model ModelStatus {
  id             String   @id @default(uuid())
  modelId        String   @map("model_id")
  status         String   @default("operational")
  availability   Float    @default(99.9)
  latencyP50     Int      @default(100) @map("latency_p50")
  latencyP95     Int      @default(200) @map("latency_p95")
  latencyP99     Int      @default(500) @map("latency_p99")
  errorRate      Float    @default(0.1) @map("error_rate")
  requestsPerMin Int      @default(0) @map("requests_per_min")
  tokensPerMin   Int      @default(0) @map("tokens_per_min")
  usage          Float    @default(0)
  region         String   @default("global")
  checkedAt      DateTime @default(now()) @map("checked_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  model          Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@unique([modelId, region])
  @@index([modelId])
  @@index([status])
  @@index([checkedAt])
  @@map("model_status")
}

model SavedFilter {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  description String?
  filters     Json      @default("{}")
  user_id     String?
  is_public   Boolean?  @default(false)
  usage_count Int?      @default(0)
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())

  @@index([usage_count(sort: Desc)], map: "idx_saved_filters_usage")
  @@index([user_id, is_public], map: "idx_saved_filters_user_public")
  @@map("saved_filters")
}

model ChangeLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  providerId String   @map("provider_id")
  modelId    String   @map("model_id")
  changeType String   @map("change_type")
  changeData Json     @map("change_data")
  confidence Float
  createdAt  DateTime @default(now()) @map("created_at")
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([modelId])
  @@index([createdAt])
  @@index([changeType])
  @@map("change_logs")
}
